Q1) Find the names of all students who are friends with someone named Gabriel. 
Query:
select name from Highschooler 
where ID in
    ( select distinct ID2 from Friend where ID1 in 
        (select ID from Highschooler where name ="Gabriel"))
        
Q2) For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like
Query:
select h1.name , h1.grade, h2.name , h2.grade
  from Highschooler h1 , Highschooler h2, Likes l 
where h1.ID = l.ID1 and h2.ID = l.ID2 and h1.grade >= h2.grade+ 2

Q3) For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order
Query:
select h1.name ,h1.grade, h2.name, h2.grade 
from Highschooler h1, Highschooler h2,
        ( select l1.ID1 as id_1,l1.ID2 as id_2 
            from Likes l1, Likes l2
           where l1.ID1 = l2.ID2 and l1.ID2 = l2.ID1)
where id_1 = h1.id and id_2 = h2.id and h1.name < h2.name

Q4) Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. 
Query:
select  name ,grade
from Highschooler 
where ID not in (select ID1 from Likes l1 union select ID2 from Likes l2)
order by grade , name

Q5) For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 
Query:
select h1.name , h1.grade, h2.name, h2.grade
from Highschooler h1, Highschooler h2, Likes l
where l.ID2 not in (select ID1 from Likes) 
and h1.ID = l.ID1 and h2.ID = l.ID2

Q6) Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.
Query:
select name, grade 
from Highschooler h
where ID not in (select f2.ID1 from Friend f2, Highschooler h2 
where h.ID = f2.ID1 and f2.ID2 = h2.ID and h.grade <> h2.grade)
order by grade,name

Q7) For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 
Query:
select distinct h1.name,h1.grade, h2.name, h2.grade, h3.name, h3.grade
from Likes l, Friend f1, Friend f2,Highschooler h1, Highschooler h2, Highschooler h3 
where l.ID2 not in (select f.ID2 from Friend f where f.ID1 = l.ID1)
and f1.ID1 = l.ID1 and f1.ID2 = f2.ID1 and f2.ID2 = l.ID2
and h1.ID = l.ID1 and h2.ID = l.ID2 and f1.ID2 = h3.ID

Q8) Find the difference between the number of students in the school and the number of different first names. 
Query:
 select diff1 - diff2 from
 ( select count(*) as diff1 from Highschooler),
 (select count(distinct name) as diff2 from Highschooler)
 
 Q9) Find the name and grade of all students who are liked by more than one other student. 
 Query:
 select distinct name,grade 
from Highschooler ,Likes 
where ID2 in (select ID2 
            from Likes group by ID2 having count(ID2) >=2)
and ID = ID2 
